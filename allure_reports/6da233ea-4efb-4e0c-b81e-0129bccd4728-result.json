{"name": "User can't register with a Username that consists of 2 symbols", "status": "failed", "statusDetails": {"message": "Failed: Something went wrong. Maybe user is registered with the \"Username\" that consists of 2 symbols", "trace": "self = <test_usernameField.Test_Username_field_validation object at 0x000001DD87D23F10>, setup = None\n\n    @allure.epic(\"Username field validation\")\n    @allure.title(\"User can't register with a Username that consists of 2 symbols\")\n    @allure.description(\"User can't register with a Username that consists of 2 symbols\")\n    def test_invalid_username_with_2_symbols(self, setup):\n        short_name = generate_short_username()\n        with allure.step('Fill the \"Username\" field by data that consists of 2 symbols'):\n            filling_text(self.driver, \"css\", \"input[placeholder='Username']\", short_name)\n        with allure.step('Fill the \"Email\" field by generated valid data'):\n            filling_text(self.driver, \"css\", \"input[placeholder='Email']\", user['email'])\n        with allure.step('Fill the \"Password\" field by generated valid data'):\n            filling_text(self.driver, \"css\", \"input[placeholder='Password']\", passw)\n        with allure.step('Click on [Sign Up]'):\n            click_element(self.driver, \"xpath\", \"//button[contains(text(), 'Sign up')]\")\n    \n        try:\n>           error_message = self.driver.find_element('xpath', '/html/body/div[1]/div/div/div/div/ul/li/ul/li')\n\ntests\\test_registration\\test_negative\\test_usernameField.py:107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5a5a3fe61decb6622beaf1f523ca49d1\")>, by = 'xpath', value = '/html/body/div[1]/div/div/div/div/ul/li/ul/li'\n\n    def find_element(self, by=By.ID, value: Optional[str] = None) -> WebElement:\n        \"\"\"Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = f'[id=\"{value}\"]'\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = f\".{value}\"\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = f'[name=\"{value}\"]'\n    \n>       return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n\nC:\\Users\\isid\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:830: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5a5a3fe61decb6622beaf1f523ca49d1\")>, driver_command = 'findElement', params = {'using': 'xpath', 'value': '/html/body/div[1]/div/div/div/div/ul/li/ul/li'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nC:\\Users\\isid\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001DD87D68490>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...unk [0x773B6BD9+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77508FD2+1218]\\\\n\\\\tRtlGetFullPathName_UEx [0x77508F9D+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"/html/body/div[1]/div/div/div/div/ul/li/ul/li\"}\nE         (Session info: headless chrome=110.0.5481.105)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x00A537D3]\nE       \t(No symbol) [0x009E8B81]\nE       \t(No symbol) [0x008EB36D]\nE       \t(No symbol) [0x0091D382]\nE       \t(No symbol) [0x0091D4BB]\nE       \t(No symbol) [0x00953302]\nE       \t(No symbol) [0x0093B464]\nE       \t(No symbol) [0x00951215]\nE       \t(No symbol) [0x0093B216]\nE       \t(No symbol) [0x00910D97]\nE       \t(No symbol) [0x0091253D]\nE       \tGetHandleVerifier [0x00CCABF2+2510930]\nE       \tGetHandleVerifier [0x00CF8EC1+2700065]\nE       \tGetHandleVerifier [0x00CFC86C+2714828]\nE       \tGetHandleVerifier [0x00B03480+645344]\nE       \t(No symbol) [0x009F0FD2]\nE       \t(No symbol) [0x009F6C68]\nE       \t(No symbol) [0x009F6D4B]\nE       \t(No symbol) [0x00A00D6B]\nE       \tBaseThreadInitThunk [0x773B6BD9+25]\nE       \tRtlGetFullPathName_UEx [0x77508FD2+1218]\nE       \tRtlGetFullPathName_UEx [0x77508F9D+1165]\n\nC:\\Users\\isid\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_usernameField.Test_Username_field_validation object at 0x000001DD87D23F10>, setup = None\n\n    @allure.epic(\"Username field validation\")\n    @allure.title(\"User can't register with a Username that consists of 2 symbols\")\n    @allure.description(\"User can't register with a Username that consists of 2 symbols\")\n    def test_invalid_username_with_2_symbols(self, setup):\n        short_name = generate_short_username()\n        with allure.step('Fill the \"Username\" field by data that consists of 2 symbols'):\n            filling_text(self.driver, \"css\", \"input[placeholder='Username']\", short_name)\n        with allure.step('Fill the \"Email\" field by generated valid data'):\n            filling_text(self.driver, \"css\", \"input[placeholder='Email']\", user['email'])\n        with allure.step('Fill the \"Password\" field by generated valid data'):\n            filling_text(self.driver, \"css\", \"input[placeholder='Password']\", passw)\n        with allure.step('Click on [Sign Up]'):\n            click_element(self.driver, \"xpath\", \"//button[contains(text(), 'Sign up')]\")\n    \n        try:\n            error_message = self.driver.find_element('xpath', '/html/body/div[1]/div/div/div/div/ul/li/ul/li')\n            if error_message.text.strip() == 'This username is taken.':\n                self.test_invalid_username_with_2_symbols(setup)\n            elif error_message.text.strip() == 'This email is taken.':\n                self.test_invalid_username_with_2_symbols(setup)\n            elif 'ion-compose' in error_message.get_attribute('class'):\n                allure.attach(self.driver.get_screenshot_as_png(), name='test_invalid_username_with_2_symbols_failed',\n                              attachment_type=allure.attachment_type.PNG)\n                pytest.fail('Test failed: \"ion-compose\" element is present on the page')\n            elif error_message.text.strip() == 'Username must start with a letter, have no spaces, and be 3 - 40 characters.':\n                pass\n            else:\n                allure.attach(self.driver.get_screenshot_as_png(), name='test_invalid_username_with_2_symbols_failed',\n                              attachment_type=allure.attachment_type.PNG)\n                pytest.fail(f'Test failed: unexpected error message: \"{error_message.text.strip()}\"')\n        except NoSuchElementException:\n            allure.attach(self.driver.get_screenshot_as_png(), name='test_invalid_username_with_2_symbols_failed',\n                          attachment_type=allure.attachment_type.PNG)\n>           pytest.fail('Something went wrong. Maybe user is registered with the \"Username\" that consists of 2 symbols ')\nE           Failed: Something went wrong. Maybe user is registered with the \"Username\" that consists of 2 symbols\n\ntests\\test_registration\\test_negative\\test_usernameField.py:125: Failed"}, "description": "User can't register with a Username that consists of 2 symbols", "steps": [{"name": "Fill the \"Username\" field by data that consists of 2 symbols", "status": "passed", "start": 1677155151520, "stop": 1677155151602}, {"name": "Fill the \"Email\" field by generated valid data", "status": "passed", "start": 1677155151602, "stop": 1677155151691}, {"name": "Fill the \"Password\" field by generated valid data", "status": "passed", "start": 1677155151691, "stop": 1677155151771}, {"name": "Click on [Sign Up]", "status": "passed", "start": 1677155151771, "stop": 1677155151811}], "attachments": [{"name": "test_invalid_username_with_2_symbols_failed", "source": "ba3b14dc-1862-4b57-ae4f-fc6a285e56d1-attachment.png", "type": "image/png"}], "start": 1677155151520, "stop": 1677155161871, "uuid": "a43253ca-9162-438f-a937-8e762c5fbe77", "historyId": "b06999c63c85321789bd01bb55e88921", "testCaseId": "0604fbb884cb1d5f3b4ac182cb4a5f30", "fullName": "tests.test_registration.test_negative.test_usernameField.Test_Username_field_validation#test_invalid_username_with_2_symbols", "labels": [{"name": "epic", "value": "Username field validation"}, {"name": "parentSuite", "value": "tests.test_registration.test_negative"}, {"name": "suite", "value": "test_usernameField"}, {"name": "subSuite", "value": "Test_Username_field_validation"}, {"name": "host", "value": "DESKTOP-I0GFSIJ"}, {"name": "thread", "value": "13920-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_registration.test_negative.test_usernameField"}]}